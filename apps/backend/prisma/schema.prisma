generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  password          String
  profile_img       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              Blog[]
  comments          Comment[]
  likes             Like[]
  reading_history   Reading_history[]
  User_token        User_token[]
  Bookmark_Category Bookmark_Category[]
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BlogType {
  publish
  draft
}

model Blog {
  id                 String                   @id @default(cuid())
  title              String
  content            String
  type               BlogType
  short_description  String
  number_of_views    Int                      @default(0)
  number_of_likes    Int                      @default(0)
  number_of_comments Int                      @default(0)
  user               User                     @relation(fields: [authorId], references: [id])
  authorId           String
  topic              Topic                    @relation(fields: [topicId], references: [id])
  topicId            String
  banner_img         String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  comments           Comment[]
  likes              Like[]
  reading_history    Reading_history[]
  Category_Blog      Bookmark_Category_Blog[]
  blog_stats         blog_stats[]
}

model Topic {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog[]
}

model Reading_history {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User_token {
  id                              String    @id @default(cuid())
  user                            User      @relation(fields: [userId], references: [id])
  userId                          String    @unique
  change_password_token           String?
  change_password_token_expiry    DateTime?
  change_password_status          Boolean?
  email_verification_token        String
  email_verification_token_expiry DateTime
  email_verification_status       Boolean
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt
}

model Bookmark_Category {
  id            String                   @id @default(cuid())
  name          String
  description   String
  userId        String
  user          User                     @relation(fields: [userId], references: [id])
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  category_blog Bookmark_Category_Blog[]
}

model Bookmark_Category_Blog {
  id         String            @id @default(cuid())
  category   Bookmark_Category @relation(fields: [categoryId], references: [id])
  categoryId String
  note       String
  blog       Blog              @relation(fields: [blogId], references: [id])
  blogId     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model blog_stats {
  id                 String   @id @default(cuid())
  blog               Blog     @relation(fields: [blogId], references: [id])
  blogId             String
  number_of_views    Int      @default(0)
  number_of_likes    Int      @default(0)
  number_of_comments Int      @default(0)
  date               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
