generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(uuid())
  name                   String
  email                  String                   @unique
  password               String
  profile_img            String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  user_blog              user_blog[]
  comments               Comment[]
  likes                  Like[]
  reading_history        Reading_history[]
  User_token             User_token[]
  user_bookmark_category user_bookmark_category[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user_blog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id              String            @id @default(uuid())
  title           String
  content         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  comments        Comment[]
  likes           Like[]
  user_blog       user_blog[]
  blog_topic      blog_topic[]
  reading_history Reading_history[]
  Category_Blog   Category_Blog[]
}

model Topic {
  id         String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  blog_topic blog_topic[]
}

model blog_topic {
  id        String   @id @default(uuid())
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reading_history {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User_token {
  id                              String    @id @default(uuid())
  user                            User      @relation(fields: [userId], references: [id])
  userId                          String    @unique
  change_password_token           String?
  change_password_token_expiry    DateTime?
  change_password_status          Boolean?
  email_verification_token        String
  email_verification_token_expiry DateTime
  email_verification_status       Boolean
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt
}

model Bookmark_Category {
  id                     String                   @id @default(uuid())
  name                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  user_bookmark_category user_bookmark_category[]
  category_blog          Category_Blog[]
}

model user_bookmark_category {
  id         String            @id @default(uuid())
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  category   Bookmark_Category @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Category_Blog {
  id         String            @id @default(uuid())
  category   Bookmark_Category @relation(fields: [categoryId], references: [id])
  categoryId String
  blog       Blog              @relation(fields: [blogId], references: [id])
  blogId     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}
